(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

(function () {
  var ns;

  ns = edsc.map;

  ns.L.sphericalPolygon = (function (LatLng, geoutil, Arc, Coordinate, config) {
    var antimeridianCrossing, convertLatLngs, dividePolygon, exports, ll2j, ll2s, makeCounterclockwise, originalRemove;
    convertLatLngs = function (latlngs) {
      var j, latlng, len1, original, result;
      result = [];
      for (j = 0, len1 = latlngs.length; j < len1; j++) {
        original = latlngs[j];
        latlng = L.latLng(original);
        while (latlng.lng > 180) {
          latlng.lng -= 360;
        }
        while (latlng.lng < -180) {
          latlng.lng += 360;
        }
        result.push(latlng);
      }
      return result;
    };
    antimeridianCrossing = function (latlng0, latlng1) {
      var arc, ref;
      arc = new Arc(Coordinate.fromLatLng(new LatLng(latlng0)), Coordinate.fromLatLng(new LatLng(latlng1)));
      return (ref = arc.antimeridianCrossing()) != null ? ref.toLatLng() : void 0;
    };
    makeCounterclockwise = function (latlngs) {
      var area;
      area = geoutil.area(latlngs);
      if (area > 2 * Math.PI) {
        latlngs.reverse();
      }
      return latlngs;
    };
    ll2s = function (latlngs) {
      var ll;
      return (function () {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = latlngs.length; j < len1; j++) {
          ll = latlngs[j];
          results.push("(" + ll.lat + ", " + ll.lng + ")");
        }
        return results;
      })().join(', ');
    };
    ll2j = function (latlngs) {
      var ll;
      return (function () {
        var j, len1, ref, results;
        ref = latlngs.concat(latlngs[0]);
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          ll = ref[j];
          results.push(ll.lng + "," + ll.lat);
        }
        return results;
      })().join(', ');
    };
    dividePolygon = function (latlngs) {
      var boundaries, boundary, containedPoles, containsNorthPole, containsSouthPole, crossing, extra, extras, hasInsertions, hasPole, hole, holes, i, inc, interior, interiors, j, k, l, lat, latlng, latlng1, latlng2, len, len1, len2, len3, lng, m, maxCrossingLat, minCrossingLat, n, next, o, p, q, ref, ref1, split;
      interiors = [];
      boundaries = [];
      holes = [];
      if (latlngs && latlngs[0] instanceof Array && typeof latlngs[0][0] !== 'number') {
        ref = latlngs.slice(1);
        for (j = 0, len1 = ref.length; j < len1; j++) {
          hole = ref[j];
          hole = convertLatLngs(hole);
          denormalizePath(hole);
          holes.push(hole);
        }
        latlngs = latlngs[0];
      }
      latlngs = convertLatLngs(latlngs);
      latlngs = makeCounterclockwise(latlngs);
      containedPoles = geoutil.containsPole(latlngs);
      containsNorthPole = (containedPoles & geoutil.NORTH_POLE) !== 0;
      containsSouthPole = (containedPoles & geoutil.SOUTH_POLE) !== 0;
      maxCrossingLat = -95;
      minCrossingLat = 95;
      split = [];
      len = latlngs.length;
      for (i = k = 0, ref1 = len; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
        latlng1 = latlngs[i];
        latlng2 = latlngs[(i + 1) % len];
        crossing = antimeridianCrossing(latlng1, latlng2);
        split.push(latlng1);
        extras = [];
        if (crossing != null) {
          lat = crossing.lat;
          if (latlng1.lng < latlng2.lng) {
            extras = [[lat, -180], [lat, 180]];
          } else {
            extras = [[lat, 180], [lat, -180]];
          }
        } else if (latlng1.lng === 180 && latlng2.lng < 0) {
          extras = [[latlng1.lat, -180]];
        } else if (latlng1.lng === -180 && latlng2.lng > 0) {
          extras = [[latlng1.lat, 180]];
        } else if (latlng2.lng === 180 && latlng1.lng < 0) {
          extras = [[latlng2.lat, -180]];
        } else if (latlng2.lng === -180 && latlng1.lng > 0) {
          extras = [[latlng2.lat, 180]];
        }
        for (l = 0, len2 = extras.length; l < len2; l++) {
          extra = extras[l];
          lat = extra[0], lng = extra[1];
          split.push(new LatLng(lat, lng));
          maxCrossingLat = Math.max(lat, maxCrossingLat);
          minCrossingLat = Math.min(lat, minCrossingLat);
        }
      }
      hasInsertions = latlngs.length < split.length;
      interior = [];
      boundary = [];
      if (hasInsertions) {
        if (Math.abs(split[0].lng) !== 180 || Math.abs(split[split.length - 1].lng) !== 180) {
          while (Math.abs(split[0].lng) !== 180) {
            split.push(split.shift());
          }
          split.push(split.shift());
        }
      }
      for (i = m = 0, len3 = split.length; m < len3; i = ++m) {
        latlng = split[i];
        interior.push(latlng);
        boundary.push(latlng);
        next = split[(i + 1) % split.length];
        if (interior.length > 2 && Math.abs(latlng.lng) === 180 && Math.abs(next.lng) === 180) {
          boundaries.push(boundary);
          boundary = [];
          hasPole = false;
          if (containsNorthPole && latlng.lat === maxCrossingLat) {
            hasPole = true;
            lng = latlng.lng;
            inc = lng < 0 ? 90 : -90;
            for (i = n = 0; n <= 4; i = ++n) {
              interior.push(new LatLng(90, lng + i * inc));
            }
          }
          if (containsSouthPole && latlng.lat === minCrossingLat) {
            hasPole = true;
            lng = latlng.lng;
            inc = lng < 0 ? 90 : -90;
            for (i = o = 0; o <= 4; i = ++o) {
              interior.push(new LatLng(-90, lng + i * inc));
            }
          }
          if (!hasPole) {
            interiors.push(interior);
            interior = [];
          }
        }
      }
      if (boundary.length > 0) {
        boundaries.push(boundary);
      }
      if (interior.length > 0) {
        interiors.push(interior);
      }
      if (containsNorthPole && containsSouthPole && !hasInsertions) {
        interior = [];
        for (i = p = 0; p <= 4; i = ++p) {
          interior.push(new LatLng(90, -180 + i * 90));
        }
        for (i = q = 0; q <= 4; i = ++q) {
          interior.push(new LatLng(-90, 180 - i * 90));
        }
        interiors.unshift(interior);
      }
      return {
        interiors: interiors,
        boundaries: boundaries
      };
    };
    L.SphericalPolygon = L.Polygon.extend({
      includes: [L.LayerGroup.prototype, L.FeatureGroup.prototype],
      options: {
        fill: true
      },
      initialize: function initialize(latlngs, options) {
        this._layers = {};
        this._options = L.extend({}, this.options, options);
        return this.setLatLngs(latlngs);
      },
      setLatLngs: function setLatLngs(latlngs) {
        var divided, latlng;
        if (latlngs[0] && Array.isArray(latlngs[0]) && latlngs[0].length > 2) {
          if (config.warn) {
            console.warn("Polygon with hole detected.  Ignoring.");
          }
          latlngs = latlngs[0];
        }
        latlngs = (function () {
          var j, len1, results;
          results = [];
          for (j = 0, len1 = latlngs.length; j < len1; j++) {
            latlng = latlngs[j];
            results.push(L.latLng(latlng));
          }
          return results;
        })();
        this._latlngs = latlngs;
        divided = dividePolygon(latlngs);
        if (this._boundaries) {
          this._interiors.setLatLngs(divided.interiors);
          return this._boundaries.setLatLngs(divided.boundaries);
        } else {
          this._interiors = L.polygon(divided.interiors, L.extend({}, this._options, {
            stroke: false
          }));
          this._boundaries = L.multiPolyline(divided.boundaries, L.extend({}, this._options, {
            fill: false
          }));
          this.addLayer(this._interiors);
          return this.addLayer(this._boundaries);
        }
      },
      getLatLngs: function getLatLngs() {
        return makeCounterclockwise(this._latlngs.concat());
      },
      newLatLngIntersects: function newLatLngIntersects(latlng, skipFirst) {
        return false;
      },
      setOptions: function setOptions(options) {
        this._options = this.options = L.extend({}, this._options, options);
        L.setOptions(this._interiors, L.extend({}, this._options, {
          stroke: false
        }));
        L.setOptions(this._boundaries, L.extend({}, this._options, {
          fill: false
        }));
        return this.redraw();
      },
      setStyle: function setStyle(style) {
        if (this.options.previousOptions) {
          this.options.previousOptions = this._options;
        }
        this._interiors.setStyle(L.extend({}, style, {
          stroke: false
        }));
        return this._boundaries.setStyle(L.extend({}, style, {
          fill: false
        }));
      },
      redraw: function redraw() {
        return this.setLatLngs(this._latlngs);
      }
    });
    L.sphericalPolygon = function (latlngs, options) {
      return new L.SphericalPolygon(latlngs, options);
    };
    originalRemove = L.EditToolbar.Delete.prototype._removeLayer;
    L.EditToolbar.Delete.prototype._removeLayer = function (e) {
      var ref;
      if ((ref = e.target) != null ? ref._boundaries : void 0) {
        e.layer = e.target;
      }
      return originalRemove.call(this, e);
    };
    L.Draw.Polygon = L.Draw.Polygon.extend({
      Poly: L.SphericalPolygon,
      addHooks: function addHooks() {
        L.Draw.Polyline.prototype.addHooks.call(this);
        if (this._map) {
          return this._poly = new L.SphericalPolygon([], this.options.shapeOptions);
        }
      }
    });
    L.Edit.Poly = L.Edit.Poly.extend({
      _getMiddleLatLng: function _getMiddleLatLng(marker1, marker2) {
        var latlng;
        return latlng = geoutil.gcInterpolate(marker1.getLatLng(), marker2.getLatLng());
      }
    });
    return exports = {
      dividePolygon: dividePolygon
    };
  })(ns.LatLng, ns.geoutil, ns.Arc, ns.Coordinate, this.edsc.config);
}).call(undefined);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYnN1bi93b3Jrc3BhY2UvZWRzYy1nZW8vc3JjL3NjcmlwdHMvc3BoZXJpY2FsX3BvbHlnb24uanMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLENBQUMsWUFBVztBQUNWLE1BQUksRUFBRSxDQUFDOztBQUVQLElBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDOztBQUVkLElBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxVQUFTLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7QUFDMUUsUUFBSSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLGNBQWMsQ0FBQztBQUNuSCxrQkFBYyxHQUFHLFVBQVMsT0FBTyxFQUFFO0FBQ2pDLFVBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQztBQUN0QyxZQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ1osV0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDaEQsZ0JBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsY0FBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsZUFBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtBQUN2QixnQkFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7U0FDbkI7QUFDRCxlQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDeEIsZ0JBQU0s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LENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxVQUFJLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQjtBQUN4QixjQUFRLEVBQUUsb0JBQVc7QUFDbkIsU0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUMsWUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2IsaUJBQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMzRTtPQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0gsS0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQy9CLHNCQUFnQixFQUFFLDBCQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7QUFDM0MsWUFBSSxNQUFNLENBQUM7QUFDWCxlQUFPLE1BQU0sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztPQUNqRjtLQUNGLENBQUMsQ0FBQztBQUNILFdBQU8sT0FBTyxHQUFHO0FBQ2YsbUJBQWEsRUFBRSxhQUFhO0tBQzdCLENBQUM7R0FDSCxDQUFBLENBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBRXBFLENBQUEsQ0FBRSxJQUFJLFdBQU0sQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBucztcblxuICBucyA9IGVkc2MubWFwO1xuXG4gIG5zLkwuc3BoZXJpY2FsUG9seWdvbiA9IChmdW5jdGlvbihMYXRMbmcsIGdlb3V0aWwsIEFyYywgQ29vcmRpbmF0ZSwgY29uZmlnKSB7XG4gICAgdmFyIGFudGltZXJpZGlhbkNyb3NzaW5nLCBjb252ZXJ0TGF0TG5ncywgZGl2aWRlUG9seWdvbiwgZXhwb3J0cywgbGwyaiwgbGwycywgbWFrZUNvdW50ZXJjbG9ja3dpc2UsIG9yaWdpbmFsUmVtb3ZlO1xuICAgIGNvbnZlcnRMYXRMbmdzID0gZnVuY3Rpb24obGF0bG5ncykge1xuICAgICAgdmFyIGosIGxhdGxuZywgbGVuMSwgb3JpZ2luYWwsIHJlc3VsdDtcbiAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yIChqID0gMCwgbGVuMSA9IGxhdGxuZ3MubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgIG9yaWdpbmFsID0gbGF0bG5nc1tqXTtcbiAgICAgICAgbGF0bG5nID0gTC5sYXRMbmcob3JpZ2luYWwpO1xuICAgICAgICB3aGlsZSAobGF0bG5nLmxuZyA+IDE4MCkge1xuICAgICAgICAgIGxhdGxuZy5sbmcgLT0gMzYwO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsYXRsbmcubG5nIDwgLTE4MCkge1xuICAgICAgICAgIGxhdGxuZy5sbmcgKz0gMzYwO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKGxhdGxuZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgYW50aW1lcmlkaWFuQ3Jvc3NpbmcgPSBmdW5jdGlvbihsYXRsbmcwLCBsYXRsbmcxKSB7XG4gICAgICB2YXIgYXJjLCByZWY7XG4gICAgICBhcmMgPSBuZXcgQXJjKENvb3JkaW5hdGUuZnJvbUxhdExuZyhuZXcgTGF0TG5nKGxhdGxuZzApKSwgQ29vcmRpbmF0ZS5mcm9tTGF0TG5nKG5ldyBMYXRMbmcobGF0bG5nMSkpKTtcbiAgICAgIHJldHVybiAocmVmID0gYXJjLmFudGltZXJpZGlhbkNyb3NzaW5nKCkpICE9IG51bGwgPyByZWYudG9MYXRMbmcoKSA6IHZvaWQgMDtcbiAgICB9O1xuICAgIG1ha2VDb3VudGVyY2xvY2t3aXNlID0gZnVuY3Rpb24obGF0bG5ncykge1xuICAgICAgdmFyIGFyZWE7XG4gICAgICBhcmVhID0gZ2VvdXRpbC5hcmVhKGxhdGxuZ3MpO1xuICAgICAgaWYgKGFyZWEgPiAyICogTWF0aC5QSSkge1xuICAgICAgICBsYXRsbmdzLnJldmVyc2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsYXRsbmdzO1xuICAgIH07XG4gICAgbGwycyA9IGZ1bmN0aW9uKGxhdGxuZ3MpIHtcbiAgICAgIHZhciBsbDtcbiAgICAgIHJldHVybiAoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaiwgbGVuMSwgcmVzdWx0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gbGF0bG5ncy5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBsbCA9IGxhdGxuZ3Nbal07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKFwiKFwiICsgbGwubGF0ICsgXCIsIFwiICsgbGwubG5nICsgXCIpXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkoKSkuam9pbignLCAnKTtcbiAgICB9O1xuICAgIGxsMmogPSBmdW5jdGlvbihsYXRsbmdzKSB7XG4gICAgICB2YXIgbGw7XG4gICAgICByZXR1cm4gKChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGosIGxlbjEsIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVmID0gbGF0bG5ncy5jb25jYXQobGF0bG5nc1swXSk7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZi5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBsbCA9IHJlZltqXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2gobGwubG5nICsgXCIsXCIgKyBsbC5sYXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkoKSkuam9pbignLCAnKTtcbiAgICB9O1xuICAgIGRpdmlkZVBvbHlnb24gPSBmdW5jdGlvbihsYXRsbmdzKSB7XG4gICAgICB2YXIgYm91bmRhcmllcywgYm91bmRhcnksIGNvbnRhaW5lZFBvbGVzLCBjb250YWluc05vcnRoUG9sZSwgY29udGFpbnNTb3V0aFBvbGUsIGNyb3NzaW5nLCBleHRyYSwgZXh0cmFzLCBoYXNJbnNlcnRpb25zLCBoYXNQb2xlLCBob2xlLCBob2xlcywgaSwgaW5jLCBpbnRlcmlvciwgaW50ZXJpb3JzLCBqLCBrLCBsLCBsYXQsIGxhdGxuZywgbGF0bG5nMSwgbGF0bG5nMiwgbGVuLCBsZW4xLCBsZW4yLCBsZW4zLCBsbmcsIG0sIG1heENyb3NzaW5nTGF0LCBtaW5Dcm9zc2luZ0xhdCwgbiwgbmV4dCwgbywgcCwgcSwgcmVmLCByZWYxLCBzcGxpdDtcbiAgICAgIGludGVyaW9ycyA9IFtdO1xuICAgICAgYm91bmRhcmllcyA9IFtdO1xuICAgICAgaG9sZXMgPSBbXTtcbiAgICAgIGlmIChsYXRsbmdzICYmIGxhdGxuZ3NbMF0gaW5zdGFuY2VvZiBBcnJheSAmJiB0eXBlb2YgbGF0bG5nc1swXVswXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmVmID0gbGF0bG5ncy5zbGljZSgxKTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZi5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBob2xlID0gcmVmW2pdO1xuICAgICAgICAgIGhvbGUgPSBjb252ZXJ0TGF0TG5ncyhob2xlKTtcbiAgICAgICAgICBkZW5vcm1hbGl6ZVBhdGgoaG9sZSk7XG4gICAgICAgICAgaG9sZXMucHVzaChob2xlKTtcbiAgICAgICAgfVxuICAgICAgICBsYXRsbmdzID0gbGF0bG5nc1swXTtcbiAgICAgIH1cbiAgICAgIGxhdGxuZ3MgPSBjb252ZXJ0TGF0TG5ncyhsYXRsbmdzKTtcbiAgICAgIGxhdGxuZ3MgPSBtYWtlQ291bnRlcmNsb2Nrd2lzZShsYXRsbmdzKTtcbiAgICAgIGNvbnRhaW5lZFBvbGVzID0gZ2VvdXRpbC5jb250YWluc1BvbGUobGF0bG5ncyk7XG4gICAgICBjb250YWluc05vcnRoUG9sZSA9IChjb250YWluZWRQb2xlcyAmIGdlb3V0aWwuTk9SVEhfUE9MRSkgIT09IDA7XG4gICAgICBjb250YWluc1NvdXRoUG9sZSA9IChjb250YWluZWRQb2xlcyAmIGdlb3V0aWwuU09VVEhfUE9MRSkgIT09IDA7XG4gICAgICBtYXhDcm9zc2luZ0xhdCA9IC05NTtcbiAgICAgIG1pbkNyb3NzaW5nTGF0ID0gOTU7XG4gICAgICBzcGxpdCA9IFtdO1xuICAgICAgbGVuID0gbGF0bG5ncy5sZW5ndGg7XG4gICAgICBmb3IgKGkgPSBrID0gMCwgcmVmMSA9IGxlbjsgMCA8PSByZWYxID8gayA8IHJlZjEgOiBrID4gcmVmMTsgaSA9IDAgPD0gcmVmMSA/ICsrayA6IC0taykge1xuICAgICAgICBsYXRsbmcxID0gbGF0bG5nc1tpXTtcbiAgICAgICAgbGF0bG5nMiA9IGxhdGxuZ3NbKGkgKyAxKSAlIGxlbl07XG4gICAgICAgIGNyb3NzaW5nID0gYW50aW1lcmlkaWFuQ3Jvc3NpbmcobGF0bG5nMSwgbGF0bG5nMik7XG4gICAgICAgIHNwbGl0LnB1c2gobGF0bG5nMSk7XG4gICAgICAgIGV4dHJhcyA9IFtdO1xuICAgICAgICBpZiAoY3Jvc3NpbmcgIT0gbnVsbCkge1xuICAgICAgICAgIGxhdCA9IGNyb3NzaW5nLmxhdDtcbiAgICAgICAgICBpZiAobGF0bG5nMS5sbmcgPCBsYXRsbmcyLmxuZykge1xuICAgICAgICAgICAgZXh0cmFzID0gW1tsYXQsIC0xODBdLCBbbGF0LCAxODBdXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXh0cmFzID0gW1tsYXQsIDE4MF0sIFtsYXQsIC0xODBdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF0bG5nMS5sbmcgPT09IDE4MCAmJiBsYXRsbmcyLmxuZyA8IDApIHtcbiAgICAgICAgICBleHRyYXMgPSBbW2xhdGxuZzEubGF0LCAtMTgwXV07XG4gICAgICAgIH0gZWxzZSBpZiAobGF0bG5nMS5sbmcgPT09IC0xODAgJiYgbGF0bG5nMi5sbmcgPiAwKSB7XG4gICAgICAgICAgZXh0cmFzID0gW1tsYXRsbmcxLmxhdCwgMTgwXV07XG4gICAgICAgIH0gZWxzZSBpZiAobGF0bG5nMi5sbmcgPT09IDE4MCAmJiBsYXRsbmcxLmxuZyA8IDApIHtcbiAgICAgICAgICBleHRyYXMgPSBbW2xhdGxuZzIubGF0LCAtMTgwXV07XG4gICAgICAgIH0gZWxzZSBpZiAobGF0bG5nMi5sbmcgPT09IC0xODAgJiYgbGF0bG5nMS5sbmcgPiAwKSB7XG4gICAgICAgICAgZXh0cmFzID0gW1tsYXRsbmcyLmxhdCwgMTgwXV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsID0gMCwgbGVuMiA9IGV4dHJhcy5sZW5ndGg7IGwgPCBsZW4yOyBsKyspIHtcbiAgICAgICAgICBleHRyYSA9IGV4dHJhc1tsXTtcbiAgICAgICAgICBsYXQgPSBleHRyYVswXSwgbG5nID0gZXh0cmFbMV07XG4gICAgICAgICAgc3BsaXQucHVzaChuZXcgTGF0TG5nKGxhdCwgbG5nKSk7XG4gICAgICAgICAgbWF4Q3Jvc3NpbmdMYXQgPSBNYXRoLm1heChsYXQsIG1heENyb3NzaW5nTGF0KTtcbiAgICAgICAgICBtaW5Dcm9zc2luZ0xhdCA9IE1hdGgubWluKGxhdCwgbWluQ3Jvc3NpbmdMYXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBoYXNJbnNlcnRpb25zID0gbGF0bG5ncy5sZW5ndGggPCBzcGxpdC5sZW5ndGg7XG4gICAgICBpbnRlcmlvciA9IFtdO1xuICAgICAgYm91bmRhcnkgPSBbXTtcbiAgICAgIGlmIChoYXNJbnNlcnRpb25zKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhzcGxpdFswXS5sbmcpICE9PSAxODAgfHwgTWF0aC5hYnMoc3BsaXRbc3BsaXQubGVuZ3RoIC0gMV0ubG5nKSAhPT0gMTgwKSB7XG4gICAgICAgICAgd2hpbGUgKE1hdGguYWJzKHNwbGl0WzBdLmxuZykgIT09IDE4MCkge1xuICAgICAgICAgICAgc3BsaXQucHVzaChzcGxpdC5zaGlmdCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaXQucHVzaChzcGxpdC5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0gbSA9IDAsIGxlbjMgPSBzcGxpdC5sZW5ndGg7IG0gPCBsZW4zOyBpID0gKyttKSB7XG4gICAgICAgIGxhdGxuZyA9IHNwbGl0W2ldO1xuICAgICAgICBpbnRlcmlvci5wdXNoKGxhdGxuZyk7XG4gICAgICAgIGJvdW5kYXJ5LnB1c2gobGF0bG5nKTtcbiAgICAgICAgbmV4dCA9IHNwbGl0WyhpICsgMSkgJSBzcGxpdC5sZW5ndGhdO1xuICAgICAgICBpZiAoaW50ZXJpb3IubGVuZ3RoID4gMiAmJiBNYXRoLmFicyhsYXRsbmcubG5nKSA9PT0gMTgwICYmIE1hdGguYWJzKG5leHQubG5nKSA9PT0gMTgwKSB7XG4gICAgICAgICAgYm91bmRhcmllcy5wdXNoKGJvdW5kYXJ5KTtcbiAgICAgICAgICBib3VuZGFyeSA9IFtdO1xuICAgICAgICAgIGhhc1BvbGUgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoY29udGFpbnNOb3J0aFBvbGUgJiYgbGF0bG5nLmxhdCA9PT0gbWF4Q3Jvc3NpbmdMYXQpIHtcbiAgICAgICAgICAgIGhhc1BvbGUgPSB0cnVlO1xuICAgICAgICAgICAgbG5nID0gbGF0bG5nLmxuZztcbiAgICAgICAgICAgIGluYyA9IGxuZyA8IDAgPyA5MCA6IC05MDtcbiAgICAgICAgICAgIGZvciAoaSA9IG4gPSAwOyBuIDw9IDQ7IGkgPSArK24pIHtcbiAgICAgICAgICAgICAgaW50ZXJpb3IucHVzaChuZXcgTGF0TG5nKDkwLCBsbmcgKyBpICogaW5jKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb250YWluc1NvdXRoUG9sZSAmJiBsYXRsbmcubGF0ID09PSBtaW5Dcm9zc2luZ0xhdCkge1xuICAgICAgICAgICAgaGFzUG9sZSA9IHRydWU7XG4gICAgICAgICAgICBsbmcgPSBsYXRsbmcubG5nO1xuICAgICAgICAgICAgaW5jID0gbG5nIDwgMCA/IDkwIDogLTkwO1xuICAgICAgICAgICAgZm9yIChpID0gbyA9IDA7IG8gPD0gNDsgaSA9ICsrbykge1xuICAgICAgICAgICAgICBpbnRlcmlvci5wdXNoKG5ldyBMYXRMbmcoLTkwLCBsbmcgKyBpICogaW5jKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaGFzUG9sZSkge1xuICAgICAgICAgICAgaW50ZXJpb3JzLnB1c2goaW50ZXJpb3IpO1xuICAgICAgICAgICAgaW50ZXJpb3IgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChib3VuZGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJvdW5kYXJpZXMucHVzaChib3VuZGFyeSk7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJpb3IubGVuZ3RoID4gMCkge1xuICAgICAgICBpbnRlcmlvcnMucHVzaChpbnRlcmlvcik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGFpbnNOb3J0aFBvbGUgJiYgY29udGFpbnNTb3V0aFBvbGUgJiYgIWhhc0luc2VydGlvbnMpIHtcbiAgICAgICAgaW50ZXJpb3IgPSBbXTtcbiAgICAgICAgZm9yIChpID0gcCA9IDA7IHAgPD0gNDsgaSA9ICsrcCkge1xuICAgICAgICAgIGludGVyaW9yLnB1c2gobmV3IExhdExuZyg5MCwgLTE4MCArIGkgKiA5MCkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IHEgPSAwOyBxIDw9IDQ7IGkgPSArK3EpIHtcbiAgICAgICAgICBpbnRlcmlvci5wdXNoKG5ldyBMYXRMbmcoLTkwLCAxODAgLSBpICogOTApKTtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcmlvcnMudW5zaGlmdChpbnRlcmlvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbnRlcmlvcnM6IGludGVyaW9ycyxcbiAgICAgICAgYm91bmRhcmllczogYm91bmRhcmllc1xuICAgICAgfTtcbiAgICB9O1xuICAgIEwuU3BoZXJpY2FsUG9seWdvbiA9IEwuUG9seWdvbi5leHRlbmQoe1xuICAgICAgaW5jbHVkZXM6IFtMLkxheWVyR3JvdXAucHJvdG90eXBlLCBMLkZlYXR1cmVHcm91cC5wcm90b3R5cGVdLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBmaWxsOiB0cnVlXG4gICAgICB9LFxuICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24obGF0bG5ncywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9sYXllcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IEwuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMYXRMbmdzKGxhdGxuZ3MpO1xuICAgICAgfSxcbiAgICAgIHNldExhdExuZ3M6IGZ1bmN0aW9uKGxhdGxuZ3MpIHtcbiAgICAgICAgdmFyIGRpdmlkZWQsIGxhdGxuZztcbiAgICAgICAgaWYgKGxhdGxuZ3NbMF0gJiYgQXJyYXkuaXNBcnJheShsYXRsbmdzWzBdKSAmJiBsYXRsbmdzWzBdLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBpZiAoY29uZmlnLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlBvbHlnb24gd2l0aCBob2xlIGRldGVjdGVkLiAgSWdub3JpbmcuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXRsbmdzID0gbGF0bG5nc1swXTtcbiAgICAgICAgfVxuICAgICAgICBsYXRsbmdzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBqLCBsZW4xLCByZXN1bHRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gbGF0bG5ncy5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICAgIGxhdGxuZyA9IGxhdGxuZ3Nbal07XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goTC5sYXRMbmcobGF0bG5nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KSgpO1xuICAgICAgICB0aGlzLl9sYXRsbmdzID0gbGF0bG5ncztcbiAgICAgICAgZGl2aWRlZCA9IGRpdmlkZVBvbHlnb24obGF0bG5ncyk7XG4gICAgICAgIGlmICh0aGlzLl9ib3VuZGFyaWVzKSB7XG4gICAgICAgICAgdGhpcy5faW50ZXJpb3JzLnNldExhdExuZ3MoZGl2aWRlZC5pbnRlcmlvcnMpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9ib3VuZGFyaWVzLnNldExhdExuZ3MoZGl2aWRlZC5ib3VuZGFyaWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9pbnRlcmlvcnMgPSBMLnBvbHlnb24oZGl2aWRlZC5pbnRlcmlvcnMsIEwuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCB7XG4gICAgICAgICAgICBzdHJva2U6IGZhbHNlXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHRoaXMuX2JvdW5kYXJpZXMgPSBMLm11bHRpUG9seWxpbmUoZGl2aWRlZC5ib3VuZGFyaWVzLCBMLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywge1xuICAgICAgICAgICAgZmlsbDogZmFsc2VcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgdGhpcy5hZGRMYXllcih0aGlzLl9pbnRlcmlvcnMpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmFkZExheWVyKHRoaXMuX2JvdW5kYXJpZXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0TGF0TG5nczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtYWtlQ291bnRlcmNsb2Nrd2lzZSh0aGlzLl9sYXRsbmdzLmNvbmNhdCgpKTtcbiAgICAgIH0sXG4gICAgICBuZXdMYXRMbmdJbnRlcnNlY3RzOiBmdW5jdGlvbihsYXRsbmcsIHNraXBGaXJzdCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5vcHRpb25zID0gTC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBMLnNldE9wdGlvbnModGhpcy5faW50ZXJpb3JzLCBMLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywge1xuICAgICAgICAgIHN0cm9rZTogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgICBMLnNldE9wdGlvbnModGhpcy5fYm91bmRhcmllcywgTC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIHtcbiAgICAgICAgICBmaWxsOiBmYWxzZVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpO1xuICAgICAgfSxcbiAgICAgIHNldFN0eWxlOiBmdW5jdGlvbihzdHlsZSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZXZpb3VzT3B0aW9ucykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmV2aW91c09wdGlvbnMgPSB0aGlzLl9vcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludGVyaW9ycy5zZXRTdHlsZShMLmV4dGVuZCh7fSwgc3R5bGUsIHtcbiAgICAgICAgICBzdHJva2U6IGZhbHNlXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JvdW5kYXJpZXMuc2V0U3R5bGUoTC5leHRlbmQoe30sIHN0eWxlLCB7XG4gICAgICAgICAgZmlsbDogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIHJlZHJhdzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExhdExuZ3ModGhpcy5fbGF0bG5ncyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgTC5zcGhlcmljYWxQb2x5Z29uID0gZnVuY3Rpb24obGF0bG5ncywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIG5ldyBMLlNwaGVyaWNhbFBvbHlnb24obGF0bG5ncywgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBvcmlnaW5hbFJlbW92ZSA9IEwuRWRpdFRvb2xiYXIuRGVsZXRlLnByb3RvdHlwZS5fcmVtb3ZlTGF5ZXI7XG4gICAgTC5FZGl0VG9vbGJhci5EZWxldGUucHJvdG90eXBlLl9yZW1vdmVMYXllciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBpZiAoKHJlZiA9IGUudGFyZ2V0KSAhPSBudWxsID8gcmVmLl9ib3VuZGFyaWVzIDogdm9pZCAwKSB7XG4gICAgICAgIGUubGF5ZXIgPSBlLnRhcmdldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnaW5hbFJlbW92ZS5jYWxsKHRoaXMsIGUpO1xuICAgIH07XG4gICAgTC5EcmF3LlBvbHlnb24gPSBMLkRyYXcuUG9seWdvbi5leHRlbmQoe1xuICAgICAgUG9seTogTC5TcGhlcmljYWxQb2x5Z29uLFxuICAgICAgYWRkSG9va3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICBMLkRyYXcuUG9seWxpbmUucHJvdG90eXBlLmFkZEhvb2tzLmNhbGwodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fcG9seSA9IG5ldyBMLlNwaGVyaWNhbFBvbHlnb24oW10sIHRoaXMub3B0aW9ucy5zaGFwZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgTC5FZGl0LlBvbHkgPSBMLkVkaXQuUG9seS5leHRlbmQoe1xuICAgICAgX2dldE1pZGRsZUxhdExuZzogZnVuY3Rpb24obWFya2VyMSwgbWFya2VyMikge1xuICAgICAgICB2YXIgbGF0bG5nO1xuICAgICAgICByZXR1cm4gbGF0bG5nID0gZ2VvdXRpbC5nY0ludGVycG9sYXRlKG1hcmtlcjEuZ2V0TGF0TG5nKCksIG1hcmtlcjIuZ2V0TGF0TG5nKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBleHBvcnRzID0ge1xuICAgICAgZGl2aWRlUG9seWdvbjogZGl2aWRlUG9seWdvblxuICAgIH07XG4gIH0pKG5zLkxhdExuZywgbnMuZ2VvdXRpbCwgbnMuQXJjLCBucy5Db29yZGluYXRlLCB0aGlzLmVkc2MuY29uZmlnKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdfQ==
